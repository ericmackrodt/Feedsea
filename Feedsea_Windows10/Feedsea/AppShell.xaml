<Page x:Name="Root"
      x:Class="Feedsea.AppShell"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="using:Feedsea"
      xmlns:controls="using:Feedsea.Controls"
      xmlns:helpers="using:Feedsea.Common.Helpers"
      xmlns:uc="using:Feedsea.UserControls"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      helpers:TitleBar.BackgroundColor="{ThemeResource TitleBarBackground}"
      helpers:TitleBar.ForegroundColor="{ThemeResource TitleBarForeground}"
      helpers:TitleBar.ButtonBackgroundColor="{ThemeResource TitleBarBackground}"
      helpers:TitleBar.ButtonForegroundColor="{ThemeResource TitleBarForeground}"
      Background="{ThemeResource PageBackgroundColor}"
      DataContext="{Binding Main, Source={StaticResource ViewModels}}"
      KeyDown="AppShell_KeyDown"
      TabNavigation="Cycle"
      mc:Ignorable="d">

    <!-- Using a Page as the root for the app provides a design time experience as well as ensures that
         when it runs on Mobile the app content won't appear under the system's StatusBar which is visible 
         by default with a transparent background.  It will also take into account the presence of software
         navigation buttons if they appear on a device.  An app can opt-out by switching to UseCoreWindow.
    -->

    <Page.Resources>
        
        <!--<Style x:Key="PageTitleTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BodyTextBlockStyle}">
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="CharacterSpacing" Value="75"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Margin" Value="12, 14, 12, 4"/>
        </Style>

        <Style x:Key="NavMenuItemContainerStyle" TargetType="ListViewItem">
            <Setter Property="MinWidth" Value="{StaticResource SplitViewCompactPaneThemeLength}"/>
            <Setter Property="Height" Value="48"/>
            <Setter Property="Padding" Value="0"/>
        </Style>

        <DataTemplate x:Key="NavMenuItemTemplate" x:DataType="local:NavMenuItem">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="48" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                --><!-- Showing a ToolTip and the Label is redundant.  We put the ToolTip on the icon.
                     It appears when the user hovers over the icon, but not the label which provides
                     value when the SplitView is 'Compact' while reducing the likelihood of showing
                     redundant information when the label is shown.--><!--
                <FontIcon x:Name="Glyph" FontSize="16" Glyph="{x:Bind SymbolAsChar}" VerticalAlignment="Center" HorizontalAlignment="Center" ToolTipService.ToolTip="{x:Bind Label}"/>
                <TextBlock x:Name="Text" Grid.Column="1" Text="{x:Bind Label}" />
            </Grid>
        </DataTemplate>-->
    </Page.Resources>

    <Grid Background="{StaticResource PageBackgroundColor}">
        <!-- Adaptive triggers -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="720" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RootSplitView.DisplayMode" Value="CompactInline"/>
                        <Setter Target="RootSplitView.IsPaneOpen" Value="True"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RootSplitView.DisplayMode" Value="Overlay"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!--Header-->
        <Grid Grid.Row="0" Background="{ThemeResource ThemeMainColor}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="TogglePaneButton"
                      TabIndex="1"
                      Style="{StaticResource SplitViewTogglePaneButtonStyle}"
                      IsChecked="{Binding IsPaneOpen, ElementName=RootSplitView, Mode=TwoWay}"
                      Unchecked="TogglePaneButton_Checked"
                      AutomationProperties.Name="Menu"
                      ToolTipService.ToolTip="Menu" />
            <!--<Button x:Name="BtnSplitView" Grid.Column="0" Style="{StaticResource AppHeaderButton}"
                Click="BtnSplitView_Click"/>-->
            <Image x:Name="ImgLogo" Grid.Column="1" Source="Assets/logo.png" Height="20" Margin="10" HorizontalAlignment="Left" />

            <Button Grid.Column="1" x:Name="BtnTemplateType" Style="{StaticResource AppHeaderButton}" HorizontalAlignment="Right"
                    Command="{Binding ChangeArticleViewTemplateCommand}" Content="{Binding ArticleViewTemplate, Converter={StaticResource IntToChar}}"/>
        </Grid>

        <!-- Top-level navigation menu + app content -->
        <SplitView x:Name="RootSplitView"
                   Grid.Row="1"
                   DisplayMode="Inline"
                   OpenPaneLength="280"
                   CompactPaneLength="42"
                   IsTabStop="False"
                   PaneBackground="{ThemeResource PanelBackgroundColor}">
            <SplitView.Pane>
                <!-- A custom ListView to display the items in the pane.  The automation Name is set in the ContainerContentChanging event. -->
                <!--<controls:NavMenuListView x:Name="NavMenuList"
                                          TabIndex="3"
                                          Margin="0,48,0,0"
                                          ContainerContentChanging="NavMenuItemContainerContentChanging"
                                          ItemContainerStyle="{StaticResource NavMenuItemContainerStyle}"
                                          ItemTemplate="{StaticResource NavMenuItemTemplate}"
                                          ItemInvoked="NavMenuList_ItemInvoked" />-->
                <uc:SidePanelControl x:Name="Sidebar" IsBarExpanded="{Binding IsPaneOpen, ElementName=SplMain}" SidebarClicked="Sidebar_SidebarClicked" ItemSelectedCommand="{Binding SelectSourceCommand}" />
            </SplitView.Pane>

            <!-- OnNavigatingToPage we synchronize the selected item in the nav menu with the current page.
                 OnNavigatedToPage we move keyboard focus to the first item on the page after it's loaded and update the Back button. -->
            <Frame x:Name="frame"
                   Navigating="OnNavigatingToPage"
                   Navigated="OnNavigatedToPage">
                <Frame.ContentTransitions>
                    <TransitionCollection>
                        <NavigationThemeTransition>
                            <NavigationThemeTransition.DefaultNavigationTransitionInfo>
                                <EntranceNavigationTransitionInfo/>
                            </NavigationThemeTransition.DefaultNavigationTransitionInfo>
                        </NavigationThemeTransition>
                    </TransitionCollection>
                </Frame.ContentTransitions>
            </Frame>
        </SplitView>
    </Grid>
</Page>